---
title: "R Functions Warm Up"
author: "Tobias M. Osborne"
format: html
---
## Load Library
```{r}
# library(tidyverse)  # For data manipulation and visualization
# library(dplyr)      # For data manipulation
# library(ggplot2)    # For plotting
```

## Question 1

```{r}
# Task: Create a function called double_it() that doubles any input value.
# Define the function
double_it <- function(x) {
    return(2 * x)
}

# Try out the function with explicit and non-explicit notation

# Explicit notation
double_it(x = 24)

# Non-explicit notation
double_it(24)

```

## Qwestion 2
task: Write a function called exclaim_age() that returns the statement “I am ___ years old!”, where the blank is entered by the user as argument age.

Then try out the function, are the values returned what you expect?
```{r}
# Define the function
exclaim_age <- function(age) {
    return(paste("I am", age, "years old!"))
}

# Try out the function with explicit notation
exclaim_age(age = 25)

# Try out the function with non-explicit notation
exclaim_age(30)

```

## Question 3
task: Consider the function called find_max():

Talk to your neighbor about what this function does and what you expect the output would be.
Run the function with some values. Is it running how you expect?
Run the function again, but this time use the function in an arithmetic expression. Is the output what you expect?
```{r}
# Define the function
find_max <- function(value_1, value_2) {
    if (value_1 > value_2) {
        return(value_1)
    } else {
        return(value_2)
    }
}

# Test the function by comparing two values
find_max(10, 20)  # Should return 20

# Test the function again with different values
find_max(35, 25)  # Should return 35

# Use the function in an arithmetic expression
find_max(15, 5) + 10  # Should return 25 (since 15 + 10 = 25)

```

#  Adding Error or Warning Messages

## Question 4
4a
Run find_max(4, 2, 5) in the Console.

What happens? What kind of message appears? Is it sufficient? If not, consider adding a warning or error message using warning() or stop(). Remember, use ?function to access the Help page. Add additional logic to the function, as needed.

```{r}
# Modify the find_max function to include error handling
find_max <- function(value_1, value_2) {
    # Check if the number of arguments provided is correct
    if (length(list(value_1, value_2)) != 2) {
        stop("Error: The function requires exactly two arguments.")
    }
    
    # Original logic to find the maximum of the two values
    if (value_1 > value_2) {
        return(value_1)
    } else {
        return(value_2)
    }
}

# Test the function with valid input (2 arguments)
find_max(10, 20)  # Should return 20

# Test the function with invalid input (3 arguments)
find_max(4, 2, 5)  # Should display an error message

```
4b
Run find_max(4, 4) in the Console.

What happens? What kind of message appears? Is it sufficient? If not, consider adding a warning or error message using warning() or stop(). Remember, use ?function to access the Help page. Add additional logic to the function, as needed.
```{r}
# Modified function without a warning for equal values
find_max <- function(value_1, value_2) {
    # Check if the number of arguments provided is correct
    if (length(list(value_1, value_2)) != 2) {
        stop("Error: The function requires exactly two arguments.")
    }
    
    # Check if both values are equal
    if (value_1 == value_2) {
        return(value_1)  # No warning, just return the value
    }
    
    # Original logic to find the maximum of the two values
    if (value_1 > value_2) {
        return(value_1)
    } else {
        return(value_2)
    }
}

# Test the function with equal values (4 and 4)
find_max(4, 4)  # Should return 4 without a warning message

```

4c
Run find_max(4, "cow") in the Console.

What happens? What kind of message appears? Is it sufficient? If not, consider adding a warning or error message using warning() or stop(). Remember, use ?function to access the Help page. Add additional logic to the function, as needed.
```{r}
# Modified function to provide a warning instead of stopping
find_max <- function(value_1, value_2) {
    # Check if the inputs are numeric
    if (!is.numeric(value_1) || !is.numeric(value_2)) {
        warning("Warning: Both inputs must be numeric values. Returning NA.")
        return(NA)  # Return NA if inputs are not numeric
    }
    
    # Check if the number of arguments provided is correct
    if (length(list(value_1, value_2)) != 2) {
        stop("Error: The function requires exactly two arguments.")
    }
    
    # Check if both values are equal
    if (value_1 == value_2) {
        return(value_1)  # No warning, just return the value
    }
    
    # Original logic to find the maximum of the two values
    if (value_1 > value_2) {
        return(value_1)
    } else {
        return(value_2)
    }
}

# Test the function with invalid input (numeric and non-numeric values)
find_max(4, "cow")  # Should display a warning and return NA

```

4d
Run find_max(4, 4) in the Console. Previously we coded our function to report an error. But perhaps the user would prefer to have the function return the shared value, as an option. Add an argument with a reasonable default value to allow the user to control this behavior. Add additional logic to the function, as needed.
```{r}
# Modified function to allow user to control behavior when values are equal
find_max <- function(value_1, value_2, return_shared = TRUE) {
    # Check if the inputs are numeric
    if (!is.numeric(value_1) || !is.numeric(value_2)) {
        warning("Warning: Both inputs must be numeric values. Returning NA.")
        return(NA)  # Return NA if inputs are not numeric
    }
    
    # Check if the number of arguments provided is correct
    if (length(list(value_1, value_2)) != 2) {
        stop("Error: The function requires exactly two arguments.")
    }
    
    # Check if both values are equal
    if (value_1 == value_2) {
        if (return_shared) {
            return(value_1)  # Return the shared value if return_shared is TRUE
        } else {
            stop("Error: Both values are equal.")
        }
    }
    
    # Original logic to find the maximum of the two values
    if (value_1 > value_2) {
        return(value_1)
    } else {
        return(value_2)
    }
}

# Test the function with equal values and return_shared set to TRUE (default)
find_max(4, 4)  # Should return 4 without an error

# Test the function with equal values and return_shared set to FALSE
find_max(4, 4, return_shared = FALSE)  # Should return an error message

```


